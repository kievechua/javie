{"name":"Javie","tagline":"Javie Client-side JavaScript Library","body":"Javie\r\n=====\r\n\r\nJavie Client-side JavaScript Library is simple toolkit written for Client-side JavaScript. The toolkit can be use separately and only requires file that is marked in the documentation. All the object use object combined with factory pattern to make a reusable global instance or multi-instance (depend which is better).\r\n\r\n## Javie\r\n\r\n`Javie` simplify the way you define your environment, for instance profiler and logger should only run in \"dev\" invironment.\r\n\r\n```javascript\r\n/* Define the environment to `dev` */\r\nJavie.ENV = \"dev\";\r\n\r\nJavie('dev', function initiateDevEnv () {\r\n\t// do something on just dev environment.\r\n    this.Profiler.enable();\r\n    this.Logger.enable();\r\n});\r\n\r\nJavie('production', function initiateProdEnv () {\r\n    // do something on just production environment.\r\n    this.Profiler.disable();\r\n    this.Logger.disable();\r\n});\r\n\r\nJavie(function initiateAllEnv () {\r\n    // this will be run in any environment.\r\n});\r\n```\r\n\r\n## Events\r\n\r\n`Javie.Events` is a publisher/subscriber object that you can use in your app, in a way it's similar to `jQuery.bind` and `jQuery.trigger` except that the event is not attach to any DOM element.\r\n\r\n```javascript\r\nvar ev = new Javie.Events;\r\n\r\nvar say = ev.listen('simon.say', function (say) {\r\n\tjQuery('<p>').text(say).appendTo('body');\r\n});\r\n\r\nev.fire('simon.say', ['hello world']);\r\nev.fire('simon.say', ['good morning']);\r\nev.fire('simon.say', ['goodbye']);\r\n\r\n// the fire('simon.say') action above will create <p>hello world</p><p>good morning</p><p>goodbye</p>\r\n\r\n// to remove an action\r\nev.forget(say);\r\n\r\n// now fire('simon.say') wouldn't do anything\r\nev.fire('simon.say', ['does not output anything']);\r\n```\r\n\r\nIn Javie, we use `Javie.Events` on top of `Javie.Request` to allow you to add attach event to any `Javie.Request` call. Let say you want to get the amount of time it took for each request.\r\n\r\n```javascript\r\nvar ev, p;\r\n\r\nev = new Javie.Events;\r\np  = new Javie.Profiler;\r\n\r\nev.listen('Request.beforeSend', function (self) {\r\n\tp.time(self.get('name') + '.request', 'Time taken for the request');\r\n});\r\n\r\nev.listen('Request.onComplete', function (data, status, self) {\r\n\tp.timeEnd(self.get('name') + '.request');\r\n});\r\n```\r\n\r\n## Profiler\r\n\r\nProfile your application the easy way, the functionality is wrapped around V8 or Firebug `console` and default to disabled unless required to run. This allow the code to sit nicely between DEVELOPMENT and PRODUCTION environment.\r\n\r\n```javascript\r\n// Enable the Profiler\r\nJavie.Profiler.enable();\r\n\r\n// Disable the Profiler\r\nJavie.Profiler.disable(); \r\n```\r\n\r\nLet start with a simple profiling. \r\n\r\n```javascript\r\nvar p = new Javie.Profiler;\r\n\r\n// start a time log\r\np.time('benchmark.a', 'Some description');\r\n\r\nfor (var i = 100; i--; ) console.log(i);\r\n\r\n// marked an end time\r\np.timeEnd('benchmark.a');\r\n\r\n/* \r\n * In addition you can also ignore start time and based the timestamp \r\n * to the first instance loaded time\r\n */\r\np.timeEnd('benchmark.b', 'Compared to Profiler.make()');\r\n```\r\n\r\nTrace function call up to now.\r\n\r\n```javascript\r\np.trace();\r\n```\r\n\r\nTo compile the output, use `Javie.Profiler::output()`\r\n\r\n```javascript\r\np.output();\r\n```\r\n\r\n## Logger\r\n\r\nLog your application without any worries, the function is wrapped around V8 ir Firebug `console` and default to disabled unless required to run. This allow the code to sit nicely between DEVELOPMENT and PRODUCTION environment.\r\n\r\n```javascript\r\n// Enable the Logger\r\nJavie.Logger.enable();\r\n\r\n// Disable the Logger\r\nJavie.Logger.disable(); \r\n```\r\n\t\r\nLet start with logging.\r\n\r\n```javascript\r\nvar logs = new Javie.Logger;\r\n\r\n// submit a error\r\nlogs.error('It a error');\r\n\r\n// submit a warn\r\nlogs.warn('It a warning');\r\n\r\n// submit a debug message\r\nlogs.debug('It a debug');\r\n\r\n// submit a info\r\nlogs.info('It a info');\r\n\r\n// submit a log\r\nlogs.log('It a log');\r\n```\r\n\r\n## Request\r\n\r\n`Javie.Request` is a quick way to use RESTful request on top of `jQuery.ajax` or `Zepto.ajax`. You can choice whether to use `GET`, `POST`, `PUT` or `DELETE` and the object will manage everything else.\r\n\r\n```javascript\r\njQuery('#register-form').bind('submit', function onRegisterFormSubmit (e) {\r\n\tvar r;\r\n\t\r\n\te.preventDefault();\r\n\t\r\n\tr = new Javie.Request('register');\r\n\tr.to('POST /register.php', this).execute();\r\n});\r\n```\r\n\r\nUsing `Javie.Events`, you can attach as many event as you wish to either global or individual name that you identify when you run `Javie.Request('register')` (in this case the name would be `register`).\r\n\r\n```javascript\r\nvar ev = new Javie.Events;\r\n\r\nev.listen('Request.beforeSend: register', function beforeSend (self) { \r\n\t// this will be run before Ajax request is send to server.\r\n});\r\n\r\nev.listen('Request.onError: register', function onValidationError (data, status, self) { \r\n\t// this will be run if server return json containing { 'errors' : [ ] }\r\n});\r\n\r\nev.listen('Request.onComplete: register', function (data, status, self) { \r\n\t// this will be run once the request is completed.\r\n});\r\n```\r\n\r\n## Requirement\r\n\r\n* jQuery/Zepto\r\n* Underscore.js\r\n* Modern browser with `console` support.\r\n\r\n## License\r\n\r\n\tThe MIT License\r\n\r\n\tCopyright (C) 2012 by Mior Muhammad Zaki <http://git.io/crynobone> \r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n\tof this software and associated documentation files (the \"Software\"), to deal\r\n\tin the Software without restriction, including without limitation the rights\r\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\tcopies of the Software, and to permit persons to whom the Software is\r\n\tfurnished to do so, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in\r\n\tall copies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n\tTHE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}